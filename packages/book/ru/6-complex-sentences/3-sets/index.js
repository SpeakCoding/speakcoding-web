import React from 'react';
import { Hint, HL, Pre, Section } from '@sc/ui';
import Term from '../../glossary/Term';

const comment = '//';

export default () => (
    <Section>
        <Section.Main narrow>
            <h1>Наборы</h1>
            <p>
                Давайте разберем наборы на примере комментариев к посту в Инстаграме. Как вы
                помните, комментарии - одна из <Term id='component'>составляющих класса</Term> Post.
                Мы не знаем заранее, сколько комментариев будет у конкретного поста. Для таких
                ситуаций в программировании используется{' '}
                <Term id='set' tooltip>
                    стандартный класс “набор”
                </Term>
                , который объединяет в себе неопределенное количество сущностей одного{' '}
                <Term id='class'>класса</Term>. В программировании их также называют массивами.
            </p>
            <p>
                Как вы уже знаете, в коде стандартные наборы обозначаются [] (это скобки - [ ]).
                Например, когда для <Term id='component'>составляющей</Term>/
                <Term id='variable'>переменной</Term> задан <Term id='class'>класса</Term>{' '}
                []Comment, то это надо читать как “set of comments”. Если максимальное количество{' '}
                <Term id='instance'>объектов</Term> в Наборе ограниченно некоторым числом, например,
                десятью <Term id='instance'>объектами</Term>, то, при создании{' '}
                <Term id='set'>набора</Term>, это число вписывается в эти квадратные скобки:
            </p>
            <Pre>var comments = Comment[10];</Pre>
            <p>
                Порядковый номер <Term id='instance'>объекта</Term> из этого набора может пригодится
                вам для временного хранения объекта в наборе или чтения конкретного объекта из этого
                набора.
            </p>
            <p>
                В программировании счет элементов в наборе начинается с 0. То есть первый элемент
                будет иметь порядковый номер 0, второй - 1, третий - 2 и далее по списку.
                Представим, что в твоем IG аккаунте есть 10 постов. В таком случае, максимальное
                количество объектов в этом Наборе - 10.
            </p>
            <p>Если мы хотим получить доступ к последнему посту в ленте, мы напишем:</p>
            <Pre>var lastPost = posts[9];</Pre>
            <p>
                Например, для просмотра stories людей, на которых вы подписаны, в наборе сториз
                Инстаграм вам всегда будет показывать последнюю Story в наборе, так как она наиболее
                свежая:
            </p>
            <Pre>
                userStories = user.getStories(); <br />
                numberOfStories = userStories.length(); <br />
                lastStory = userStories
                <Hint>
                    [numberOfStories - 1]
                    <Hint.Tooltip>
                        Как вы видите, numberOfStories - название переменной, которая передаст нам
                        цифру количества stories. Затем мы отнимаем от нее единицу и получаем
                        последнюю story.
                    </Hint.Tooltip>
                </Hint>
                ;
            </Pre>
            <p>
                Есть особенный тип наборов, в котором каждая клетка будет иметь не номер в скобках -
                [1] - а, имя. Это позволит нам обратиться к ней по имени.
            </p>
            <p>
                <HL.Context active>
                    var a: [<HL color='green'>Int</HL>: <HL color='sandy-brown'>String</HL>] -
                    массив (набор), который хранит <HL color='sandy-brown'>строки</HL> (как вы
                    помните, string - это стандартный класс для текстовой строки), у которых имя -
                    это <HL color='green'>цифра</HL> <br />
                    var b: [<HL color='light-sky-blue'>String</HL>: <HL color='wheat'>String</HL>] -
                    массив(набор) <HL color='wheat'>строк</HL> (текстовых значений), которые названы
                    словами. Такие наборы называются словарями.
                </HL.Context>
            </p>
            <h2>Словари</h2>
            <p>
                Повторим: наборы — это такие пронумерованные списки, где к каждому элементу можно
                обратиться по его номеру. Это очень удобно, но иногда нам проще присвоить элементу
                набора какое-то имя. Тогда на помощь приходят{' '}
                <Term id='dictionary' tooltip>
                    Словари
                </Term>
                .
            </p>
            <p>
                Словари — это такие наборы, элементы которых имеют не номер, а название. Это
                небольшое изменение открывает огромные возможности.
            </p>
            <p>
                Допустим, мы захотели добавить в программу группу{' '}
                <HL color='aquamarine' active>
                    коллег нашего пользователя
                </HL>
                . Создадим словарь (набор), который будет их содержать:
            </p>
            <Pre>
                var{' '}
                <HL color='aquamarine' active>
                    workMembers
                </HL>{' '}
                = [“developer”: User(userName: “John”)];
            </Pre>
            <p>Добавим нескольких членов команды:</p>
            <Pre>
                workMembers[“designer”] = User(userName: “Jess”); <br />
                workMembers[“product”] = User(userName: “Beck”);
            </Pre>
            <p>
                Теперь мы можем обратиться к любому из элементов набора по его названию, которое в
                программировании называется ключом. В данный момент у словаря три ключа: developer,
                designer, product. Например, нам понадобилось узнать, как зовут продакт менеджера из
                команды пользователя. Мы просто напишем:
            </p>
            <Pre>workMembers[“product”].userName</Pre>
            <p>
                Как видно, тут нет никаких чисел, и нам не надо помнить, на каком месте в
                словаре(наборе) мы храним объекты. Вместо этого мы обращаемся к его элементам по
                ключам.
            </p>
            <h2>Комментарии к коду</h2>
            <p>
                {comment} <br />
                Комментарии — это текстовые заметки в коде, которые программисты оставляют себе или
                другим программистам. Комментарии не читаются машиной. Они не «исполняются» и нужны
                только для удобства. Чтобы машина поняла, что перед ней комментарий и пропустила
                его, текст заключается в специальные символы. Обычный комментарий в коде
                обозначается <b>{comment}</b> или <b>#</b>, они относятся только к этой строке кода.
                Если комментарий длинный, то выделяется так "<b>{'/* текст комментария */'}</b>" В
                Интернете всегда можно найти, как выделяются комментарии в конкретном языке. В
                современных редакторах программирования такие комментарии часто подсвечиваются
                цветом.
            </p>
        </Section.Main>
    </Section>
);
