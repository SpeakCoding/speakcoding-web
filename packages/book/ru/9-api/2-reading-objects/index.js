import React from 'react';
import { Callout, HL, Link, Pre, Section } from '@sc/ui';
import { Assignment } from '../../../components';
import Term from '../../glossary/Term';

const code1 = `{{func getPostsOf}}(hl:orange)({{user: User}}(hl:thistle)) -> {{[Post]}}(hl:light-sky-blue)`;

const code2 = `let {{request}}(hl:green) = makeRequest(method: {{HTTPMethod.GET}}(hl:light-sky-blue), {{endpoint}}(hl:sandy-brown): " {{/users/}}(hl:sandy-brown) {{\\(user.id)}}(h:hint) {{/posts}}(hl:sandy-brown).json", authorized: true, {{parameters: nil}}(hl:turquoise))`;
const hint2 = `В предыдущих главах мы объединяли разные текстовые значения в строку с помощью символа "+", а здесь через обратный знак дроби "\\" Он объединит текстовое и цифровое обозначение и вставит их в строку \\ Иногда после него могут стоять скобки (...), в них могут выполняться те или иные операции.`;

const code3 = `{{performRequest}}(hl:red)(request: request, completion: requestCompletion)`;

const code4 = `
func requestCompletion (result: Any?, metadata: [String : String]?, {{error: Error?}}(hl:steel-blue)) {
    if let postJSONs = result as? {{[[}}(hl:plum) {{String}}(hl:orange): Any {{]]}}(hl:plum) {
        let posts = postJSONs.{{map}}(hl:light-sky-blue) { (postJSON) -> Post in
            Post.instance(withJSON: postJSON)
        }
        feed.posts = posts
        Cache.shared.update(feed: feed)
        completion(posts, nil)
    } else {
        completion(nil, error)
    }
}`;

const code5 = `
Json == String -> [String : Any] 
[Json == String] -> [ [String : Any] ]`;

export default () => (
    <>
        <Section>
            <Section.Main narrow>
                <h2>Чтение объектов или чтение списка объектов</h2>
                <Callout>
                    Запрос GET используется для получения данных с сервера, чтения информации.
                    Позволяет читать объект или список.
                </Callout>
                <HL.Context active>
                    <p>
                        Давайте представим, что мы хотим загрузить на телефон{' '}
                        <HL color='light-sky-blue'>все посты</HL>{' '}
                        <HL color='thistle'>конкретного пользователя</HL>. Для этого на клиенте мы
                        должны будем написать <HL color='orange'>функцию</HL> и специальный запрос,
                        который будет содержать длинную подробную адресную строку, похожую на строку
                        в браузере (
                        <Link href='https://instagram.speakcoding.co/users/1/posts.json' blank>
                            https://instagram.speakcoding.co/users/1/posts.json
                        </Link>
                        ).
                    </p>
                    <Pre>{code1}</Pre>
                    <p>
                        Для начала нам нужно сформулировать <HL color='green'>запрос</HL>. Он будет
                        состоять из нескольких частей
                    </p>
                    <ul>
                        <li>
                            пути к файлу на сервере c указанием -{' '}
                            <HL color='sandy-brown'>endpoint</HL> - точки приема запроса на стороне
                            сервера,
                        </li>
                        <li>
                            типа запроса (их называют методами), который определяет необходимое
                            действие (получить все посты)
                        </li>
                        <li>
                            <HL color='turquoise'>параметров</HL>, которыми запрашиваемые данные
                            должны обладать. В нашем случае дополнительных параметров не требуется.
                        </li>
                        <li>
                            Также некоторые запросы требуют, чтобы клиент, запрашивающий данные, был
                            авторизован (об этом расскажем дальше):
                        </li>
                    </ul>
                    <Pre hint={hint2}>{code2}</Pre>
                    <p>
                        Запрос GET является описанием операции, которую должен произвести сервер, и
                        на этот запрос на сервере существует функция с описанием того, как на него
                        реагировать. Можно ввести эту ссылку в браузере и получить информацию о
                        нужном нам объекте.
                    </p>
                    <p>
                        После того как мы сформировали наш запрос, мы опишем функцию, которая{' '}
                        <HL color='red'>выполнит запрос</HL>.
                    </p>
                    <Pre>{code3}</Pre>
                    <p>
                        Этой функции мы передадим функцию requestCompletion, которая будет выполнена
                        в тот момент, когда сервер вернет нам информацию об объекте (объект (result)
                        или выдаст <HL color='steel-blue'>ошибку</HL>, если такого объекта нет.
                    </p>
                    <Pre>{code4}</Pre>
                </HL.Context>
                <p>
                    Как мы обсуждали, информация, которую возвращает сервер, будет изначально
                    представлена в виде текстовой строки. Эта строка будет написана в формате JSON.
                </p>
                <Callout>
                    <Term id='json' tooltip>
                        JSON
                    </Term>{' '}
                    - это формат (удобен для текстовой записи информации об объектах), его можно
                    представить в виде проименованного набора, где каждому имени соответствует
                    название составляющей. Поэтому в коде выше, так как мы запрашиваем информацию о
                    всех постах, результат ответа сервера - json - будет во множественном числе
                    (отсюда двойные квадратные скобки в функциях выше).
                </Callout>
                <p>
                    В нашем случае (так как мы получаем от сервера набор постов, и каждый пост будет
                    представлен в виде проименнованного набора) результат, полученный с сервера,
                    будет представлен в виде набора проименнованных наборов [ [String : Any] ]
                </p>
                <Pre>{code5}</Pre>
                <p>
                    Вы могли бы общаться с сервером по-другому, но когда вы думаете о данных в
                    связке с каким-то конкретным объектом, формат JSON сильно упрощает работу с
                    ними.
                </p>
                <p>В современных языках у стандартных наборов появились свои стандартные функци.</p>
                <p>
                    Например,{' '}
                    <HL color='light-sky-blue' active>
                        map
                    </HL>{' '}
                    проходится по всем объектам в своей базе данных, выполняет написанные далее
                    строчки кода, чтобы превратить информацию о них в объекты необходимого нам
                    класса (в данном случае - текст). Она вернет набор элементов нового типа и
                    отправит ответ на устройство.
                </p>
                <p>
                    Функции Makerequest (создает объект) и performrequest (отправляет объект на
                    сервер) чаще всего являются стандартными, и мы можем скопировать их из какого-то
                    хранилища/библиотеки в интернете. Они переводят параметры в вид, которым
                    пользуются стандартные функции стандартных библиотек, которые общаются с
                    сервером.
                </p>
            </Section.Main>
        </Section>

        <Assignment id='ru/24' />
    </>
);
