import React from 'react';
import { Code, Pre, Section } from '@sc/ui';
import { Assignment } from '../../../components';
import Term from '../../glossary/Term';

const code1 = `
member do
    post :like, :unlike, :save, :unsave
    get :likers
end`;

const code2 = `
collection do
    get :saved, :tagged
end`;

export default () => (
    <>
        <Section>
            <Section.Main narrow>
                <h2>API</h2>
                <p>
                    Мы обсудили создание баз данных и описание необходимых классов. Теперь вам нужно
                    реализовать непосредственно обработку приходящих запросов программ с клиента и
                    подготовку ответов для них.
                </p>
                <p>Для этого на сервере нужно описать функцию, которая бы отвечала</p>
                <ul>
                    <li>за то, чтобы принимать запросы,</li>
                    <li>читать и разбирать URL на переданные параметры,</li>
                    <li>
                        создавать экземпляры соответствующих контроллеров, и запускать их функции,
                        соответствующие действию, которые необходимо произвести (создать, обновить,
                        и т.д.).
                    </li>
                </ul>
                <p>
                    Как мы упоминали, т.к. на сервере используются стандартные библиотеки фреймворка{' '}
                    <Term id='ruby-on-rails'>Ruby On Rails</Term> (о нем мы поговорим чуть позже),
                    все эти действия могут произвести стандартные функции, достаточно только указать
                    “пути” (на какие точные URL серверная программа должна реагировать) и сами
                    действия.
                </p>
                <p>В файле config/routes.rb мы описываем все эти URL:</p>
                <Pre>resources :posts, only: [:create, :show, :index, :update, :destroy]</Pre>
                <p>
                    Вызвав функцию resources, мы сообщаем, что у нас есть посты и их можно
                    создавать, отображать, просматривать списком, обновлять и удалять.
                    Соответственно, подразумевается, что вы уже написали controller с именем
                    post_controller и что в нем есть необходимые функции, которые здесь перечислены.
                </p>
                <p>
                    Итак, серверная программа будет обрабатывать запросы по URL и отвечать на них
                    соответствующим endpoint’ам JSON.
                </p>
                <p>
                    Для нестандартных функций мы должны будем указать, к чему они применимы: функция{' '}
                    <b>member</b> будет означать, что описанные действия будут применены к
                    конкретному экземпляру:
                </p>
                <Pre.Box>
                    <Code value={code1} />
                </Pre.Box>
                <p>
                    функция <b>collection</b> - ко всему множеству объектов.
                </p>
                <Pre.Box>
                    <Code value={code2} />
                </Pre.Box>
                <p>
                    Обязательно убедитесь, что все классы (users/posts/ etc) и их контроллеры
                    называются так, как вы описали в функции (save/unsave).
                </p>
            </Section.Main>
        </Section>

        <Assignment number={29} href='#'>
            В серверном коде посмотрите на контроллер для класса User и соответствующую часть
            конфигурационного файла routes.rb, и напишите список запросов, которые сервер может
            обрабатывать для users, URL для этих запросов, а также их тип (GET/POST/etc.)
        </Assignment>
    </>
);
