import React from 'react';
import { Pre } from '@sc/ui';
import { format } from './utils';
import s from './style.css';

export default () => (
    <>
        <p>
            <b>Импорт библиотеки</b>
        </p>
        <Pre>import ИмяБиблиотеки</Pre>
        <p>
            Слово import + название библиотеки с большой буквы (каждое слово в названии также с
            большой буквы). Это позволяет в текущем файле использовать все классы, определенные в
            этой библиотеке.
        </p>
        <div className={s.gap} />

        <p>
            <b>Определение(описание) класса</b>
        </p>
        <Pre>{`class ИмяКласса {}`}</Pre>
        <p>
            Слово class + имя класса с большой буквы (каждое слово в названии также с большой
            буквы). Тело класса в {'{ }'} скобках. При клике на имя класса или на одну из {'{ }'}{' '}
            скобок с зажатым Command, вы сможете увидеть все строки, относящиеся к описанию.
        </p>
        <Pre>{`class ИмяКласса : Класс_Наследуемый, Еще_Класс_Наследуемый { }`}</Pre>
        <p>
            Через двоеточее после назавания и до {'{'} скобки через запятую перечислены классы, от
            которых унаследован текущий класс (через наследование он получает все их составляющие и
            функции).
        </p>
        <p>
            <b>extension</b> - ключевое слово, означающее расширение уже описанного класса
            дополнительными функциями.
        </p>
        <p>
            <b>selector</b> в Swift - это класс, внутри которого функция. Используется, когда вы
            хотите передать функцию как параметр функции (как объект).
        </p>
        <div className={s.gap} />

        <p>
            <b>Составляющие класса</b>
        </p>
        <Pre>var имяСоставляющей: ИмяКлассаСоставляющей</Pre>
        <p>
            Ключевое слово <b>var</b> или <b>let</b>, после которого идет имя составляющей с
            маленькой буквы, каждое последующее слово в названии с большой буквы, после него
            двоеточее и имя класса этой составляющей с большой буквы (каждое слово в названии также
            с большой буквы). Классы из импортированных библиотек в XCode отмечаются темно-синим
            цветом, классы, описанные нами в одном из файлов нашего кода, - темно-зеленым.
        </p>
        <p>
            Каждая составляющая записывается на своей строке. Чаще всего, составляющие перечислены в
            самом начале описания класса, перед описанием функций, но это не обязательно, некоторые
            составляющие вы можете встретить в другом месте файла.
        </p>
        <Pre>var имяСоставляющей: [ИмяКлассаСоставляющей]</Pre>
        <p>
            Если класс составляющей - это набор, то на месте класса составляющей мы пишем [ ]
            скобки, внутри которых пишем класс элемента этого набора.
        </p>
        <Pre>private var имяСоставляющей: ИмяКлассаСоставляющей</Pre>
        <p>
            Перед ключевым словом <b>var</b> или <b>let</b>, могут идти дополнительные ключевые
            слова (одно или несколько):
        </p>
        <p>
            <b>public/private</b> - private означает, что эту составляющую можно читать/изменять
            только из функций этого класса. Противоположность private - это или отсутствие ключевых
            слов перед переменной, или ключевое слово public.
        </p>
        <Pre>@IBOutlet var имяСоставляющей: ИмяКлассаСоставляющей</Pre>
        <p>
            <b>@IBOutlet</b> - означает, что составляющая связана с определенной частью интерфейса в
            .xib файле. Обычно перед ней стоит значок @, он не имеет значения с точки зрения
            программирования, но нужен для компилятора. Прочитав его, компилятор перейдет в файл,
            где были определены параметры для этих составляющих. Он установит их в соответствии с
            теми параметрами, которые мы описали в визуальном редакторе. У IBOutlet есть еще одна
            особенность: фактически, перечисляя составляющие, мы вызываем соответствующие классы и
            создаем экземпляры этих классов.
        </p>
        <Pre>weak var имяСоставляющей: ИмяКлассаСоставляющей</Pre>
        <p>
            <b>weak</b> - скорее всего, вы обнаружите, что вам нужно добавить это слово,
            столкнувшись с ошибкой/конфликтной ситуацией по ходу работы. Оно тоже в большей степени
            связано с чтением кода компилятором и оптимизацией работы программы. Мы обсуждали, что
            для корректной работы, объекты, созданные в процессе работы программы и не
            переиспользуемые в других частях кода, должны быть удалены. Раньше программисты должны
            были следить за этим самостоятельно, но в современных языках это чаще всего происходит
            автоматически. Если компилятор выдает вам ошибку при чтении, возможно вам нужно
            проверить, удаляется ли значение автоматически, а также прочитать, какой должна быть
            переменная в вашем конкретном случае. Есть много статей, объясняющих особенности
            употребления weak. Вы можете найти их, если хотите, но на чтение кода это понимание не
            влияет.
        </p>
        <Pre>static var имяСоставляющей: ИмяКлассаСоставляющей</Pre>
        <p>
            <b>class</b> (именно в сочетании class var) и <b>static</b> - составляющая класса,
            которая относится не к отдельным экземплярам класса, а имеет одно и то же, часто
            изначально заданное значение для всех экземпляров этого класса. К ней можно обращаться
            без того, чтобы у вас были экземпляры, в которых она используется. Чаще всего в таких
            составляющих хранятся стандартные(дефолтные) значения экземпляра класса, и их можно
            использовать во всем файле этого класса.
        </p>
        <Pre>var имяСоставляющей: ИмяКлассаСоставляющей!</Pre>
        <p>
            После класса составляющей могут идти восклицательный или вопросительный знаки. Когда{' '}
            <u>после класса</u> вы видите ! - это означает, что значение составляющей обязательно
            должно быть задано, оно не может быть пустым, а ? - что может.
        </p>
        <Pre>var имяСоставляющей: ИмяКлассаСоставляющей = значениеПоУмолчанию</Pre>
        <p>
            Составляющей может быть задано значение по умолчанию. Для этого после имени составляющей
            и ее класса, ставится знак = равенства и указывается необходимое значение.
        </p>
        <Pre>var имяСоставляющей = значениеПоУмолчанию</Pre>
        <p>
            В этом случае имя класса может быть опущенным (не написано), так как оно однозначно
            определяется классом значения после знака равенства.
        </p>
        <Pre>
            {format`
            class var имяСоставляющей: ИмяКлассаСоставляющей {
                get {

                }
            }`}
        </Pre>
        <p>
            Также значение по умолчанию может быть задано через блок последовательности шагов в{' '}
            {'{ }'} скобках. При чтении значения такой составляющей, каждый раз будут выполняться
            шаги, описанные в блоке с ключевым словом <b>get</b>. Возвращаться будет то значение,
            которое должно (либо за счет ключевого слово return, либо просто значение, полученное в
            последней строке этого блока (после слова return)).
        </p>
        <div className={s.gap} />
    </>
);
