import React from 'react';
import { Pre } from '@sc/ui';
import { format } from './utils';
import s from './style.css';

export default () => (
    <>
        <p>
            <b>if и else (логические операторы)</b>
        </p>
        <p>
            <b>if/else</b> используются в случае если часть действий, описанных в абзаце (функции),
            должна выполняться не всегда, а только при каких-то условиях. If(...) проверяет условие
            записанное в скобках и, если результат правдивый (true), то выполняется блок кода. В
            swift условие не обрамляется в ( ) скобки, а просто идет после ключевого слово if и
            перед открывающей {'{'} скобкой, после которой идут шаги, выполнение которых мы хотим
            ограничить. Они заканчиваются {'}'} закрывающей скобкой. Вы можете кликнуть на if или на
            одну из скобок с зажатым Command и увидеть все строки, ограниченные этим условием.
        </p>
        <p>В условии if можно обращаться к составляющим и их составляющим, и вызывать функции.</p>
        <p>
            Если в результате выполнения действий, описанных в условии, получено значение отличное
            от 0, false или null, то условие считается соблюденным. Если нам нужно проверить
            полученное значение на соответствие какому-то другому значению, мы можем использовать
            логические операторы == (идентично), > (больше), {'<'} (меньше) или != (не равно).
        </p>
        <Pre>
            {format`
            if self.имяПеременной == 5 {

            }`}
        </Pre>
        <p>
            В условии if мы можем сразу изменить значение существующей переменной или задать новую
            переменную (если вы задаете новую переменную, она будет доступна только в рамках шагов
            внутри условия). В таком случае, помещенное в переменную значение для выполнения условия
            должно проверяться: оно должно быть не равно 0, не быть false или null.
        </p>
        <Pre>
            {format`
            if let имяПеременной = … {

            } else {

            }`}
        </Pre>
        <p>
            После закрывающей {'}'} скобки блока if может идти ключевое слово else (иначе). Оно
            опишет альтернативный результат работы программы в случае, если условие не выполняется.
            Для этого после else идут фигурные {'{ }'} скобки, в которых описаны альтернативные шаги
            функции.
        </p>
        <Pre>let имяПеременной = условие ? значениеЕслиВерно : значениеЕслиНеВерно</Pre>
        <p>
            Когда в результате проверки условия мы хотим просто записать в переменную одно значение
            для случая, когда условие верно, и другое значение, если условие не выполняется, мы
            используем однострочную запись: условие, знак ? вопроса, значение (если верно), :
            двоеточие, значение (если не верно).
        </p>
        <div className={s.gap} />

        <p>
            <b>for, while (циклические операторы)</b>
        </p>
        <p>
            <b>for/while</b> используются, когда описанные в абзаце действия необходимо повторить
            некоторое количество раз. После ключевого слово while в Swift идет условие в круглых
            скобках (может быть и без скобок), которое заканчивается открывающей фигурной {'{'}{' '}
            скобкой, после чего перечисляются шаги, которые надо повторять, пока условие верно. Они
            заканчиваются закрывающей фигурной скобкой {'}'}.
        </p>
        <Pre>
            {format`
            while условие {

            }`}
        </Pre>
        <p>
            Слова break/continue/return используются в коде для обозначения прерывания списка
            действий, которые описаны в абзаце:
        </p>
        <p>
            Break - перестать делать вообще цикл. <br />
            Continue - перестать делать данное повторение и начать снова. <br />
            Первые два используются только в описании циклов, а return только для функций.
        </p>
        <p>
            <b>Try и catch</b> - ключевые слова, которые пишутся перед функцией, чтобы предотвратить
            shut down программы на конкретном куске кода, где возможно есть ошибка.
        </p>
        <Pre>
            {format`
            func имяФункции(имяВводной: КлассВводной){
                func имяСабФункции(имяВводнойСабфункции: КлассВводнойСабФункции) {
                    ... = имяВводной
                }
            }`}
        </Pre>
        <p>
            Внутри определения функции вы можете встретить запись, похожую на определение функции -
            ключевое слово func имяФункции - это значит, что мы определяем “суб”-функцию, которую
            будем использовать только в рамках шагов этой функции. Часто это необходимо для того,
            чтобы передать субфункцию для выполнения одной из вызываемых функций - closure или
            completion. Внутри шагов такой суб-функции можно использовать все переменные, доступные
            в этой функции.
        </p>
        <Pre>... = имяПеременной as ИмяДругогоКласса</Pre>
        <p>
            Если после переменной/составляющей идет ключевое слово as, после которого написано имя
            класса, это значит, что мы хотим обратиться к этой переменной или составляющей, как если
            бы она была этим другим классом. Это можно делать когда класс этой переменной или
            составляющей унаследован от этого другого класса, или когда перевод одного в другое
            заранее определен в этих классах.
        </p>
    </>
);
